data %>%
pairwise_t_test(mean~salience, paired=TRUE, p.adjust.method='fdr')
data %>%
cohens_d(mean~salience, paired=TRUE)
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Code_Reviewed/PerisYague2023/Raw_Results")
semrating<-read.csv('SemanticRelatedness_preproc.csv')
semrating<-as.data.frame(semrating)
semrating$subject <- as.factor(semrating$subject)
semrating$age <- as.numeric(semrating$age)
semrating$gender <- as.factor(semrating$gender)
semrating$word <- as.factor(semrating$word)
semrating$list <- as.factor(semrating$list)
semrating$oddtype <- as.factor(semrating$oddtype)
semrating$rating <- as.numeric(semrating$rating)
semrating <- droplevels(semrating)
demographics <- c(24,62,60,28,27,30,27,21,26,27,32,27,31,24)
demographics.mean <- mean(demographics) # mean age 44
demographics.sd <- sd(demographics) #sd 24.04
data  <- semrating %>%
group_by(subject, oddtype) %>%
get_summary_stats(rating, type = 'mean_ci')
data <-droplevels(data)
semrating_aov<-anova_test(data=data, dv=mean, wid=subject,
within=c(oddtype), effect.size = 'pes'
)
get_anova_table(semrating_aov)
data %>%
pairwise_t_test(mean~oddtype, paired=TRUE, p.adjust.method='fdr')
data %>%
cohens_d(mean~oddtype, paired=TRUE)
plt <- ggboxplot(data, x='oddtype', y = 'mean')
words  <- semrating %>%
group_by(word) %>%
get_summary_stats(rating, type = 'mean_sd')
path_out<-'/Raw_Results/'
#write.csv(words,paste(path_out,'semantic_ratings_mean.csv',sep = ''))
data %>%
pairwise_t_test(mean~oddtype, paired=TRUE, p.adjust.method='fdr')
data %>%
cohens_d(mean~oddtype, paired=TRUE)
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Code_Reviewed/PerisYague2023/Raw_Results")
listrecallSOA<-read.csv('list_recall_SOA_R.csv')
listrecallSOA<-as.data.frame(listrecallSOA)
listrecallSOA$SOA<-factor(listrecallSOA$SOA)
listrecallSOA$subject<-factor(listrecallSOA$subject)
listrecallSOA.data<- listrecallSOA %>%
group_by(SOA,subject) %>%
get_summary_stats(total_recall_list, type='mean')
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
#Install all libraries
library(tidyverse)
library(ggpubr)
library(rstatix)
library(rsample)
library(dplyr)
library(ggplot2)
library(data.table)
library(effects)
library(lme4)
library(plyr)
library(emmeans)
library(reshape2)
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Code_Reviewed/PerisYague2023/Raw_Results")
listrecallSOA<-read.csv('list_recall_SOA_R.csv')
listrecallSOA<-as.data.frame(listrecallSOA)
listrecallSOA$SOA<-factor(listrecallSOA$SOA)
listrecallSOA$subject<-factor(listrecallSOA$subject)
listrecallSOA.data<- listrecallSOA %>%
group_by(SOA,subject) %>%
get_summary_stats(total_recall_list, type='mean')
listrecallSOA.data<-listrecallSOA.data[-c(3,4)]
names(listrecallSOA.data)[3] <- "total_recall_list"
listrecallSOA.data<-as.data.frame(listrecallSOA.data)
listrecallSOA.data$SOA<-as.factor(listrecallSOA.data$SOA)
listrecallSOA.data$subject<-as.factor(listrecallSOA.data$subject)
listrecallSOA.data$total_recall_list<-as.numeric(listrecallSOA.data$total_recall_list)
listrecallSOA.wide<-reshape(listrecallSOA, idvar = 'subject', timevar = 'SOA', direction = 'wide')
names(listrecallSOA.wide)[2] <- "SOA 6"
names(listrecallSOA.wide)[3] <- "SOA 3"
names(listrecallSOA.wide)[4] <- "SOA 2"
names(listrecallSOA.wide)[5] <- "SOA 1"
names(listrecallSOA.wide)[6] <- "SOA 4"
## Plot recall performance by SOA in %
per100recallbySOA <- listrecallSOA
per100recallbySOA$total_recall_list<-(per100recallbySOA$total_recall_list)/14*100 #Now we have the % of items recalled
listrecallSOAplot2<-per100recallbySOA %>%
group_by(SOA) %>%
get_summary_stats(total_recall_list,type='mean_ci')
per100recallbySOA <-per100recallbySOA %>%
group_by(SOA, subject) %>%
get_summary_stats(total_recall_list, type='mean_ci')
# Plot
list.per100.recall.SOA.fig2<-ggplot(data=listrecallSOAplot2, aes(x=as.factor(SOA), y=mean, color=SOA, ymin=mean-ci, ymax=mean+ci))+
#geom_pointrange(aes(ymin=mean-ci,ymax=mean+ci) ,position=position_dodge(width=0.5), shape=15, size=0.5)+
geom_errorbar(aes(x=SOA, ymin=mean-ci, ymax=mean+ci), width=0.4, size=1, position=position_dodge(0.9), stat='identity')+
geom_point(position=position_dodge(0.9), size=3, shape=20) +
geom_jitter(data=per100recallbySOA,aes(color=SOA, x=SOA, y=mean), position=position_jitterdodge(dodge.width = 0,2),  show.legend=FALSE, alpha=0.3, inherit.aes=F)+
scale_color_brewer(palette="Set2")+
scale_y_continuous(n.breaks=10)+
#geom_hline(yintercept=50, linetype = 'dashed', color = 'grey')+
theme_classic()+
labs(x='Stimulus Onset Asynchrony', y='% items recalled')+
theme(text=element_text(size=25))+
scale_y_continuous(
labels = scales::number_format(accuracy = 1))
list.per100.recall.SOA.fig2
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Code_Reviewed/PerisYague2023/Raw_Results")
oddballs<-read.csv('oddlists.csv')
oddballs$enc_pos <- as.numeric(oddballs$enc_pos)
oddballs$rec_pos <- as.numeric(oddballs$rec_pos)
oddballs$list_type <- as.factor(oddballs$list_type)
oddballs$subject <- as.factor(oddballs$subject)
oddballs <- drop_na(oddballs) #drop the trials where odd not recalled
controls <- read.csv('ctrlists.csv')
controls$enc_pos <- as.numeric(controls$enc_pos)
controls$rec_pos <- as.numeric(controls$rec_pos)
controls$list_type <- as.factor(controls$list_type)
controls$subject <- as.factor(controls$subject)
controls <- drop_na(controls) #drop the trials where controls not recalled
#Only take trials where the oddballs and controls were encoded in the 7,8,11,12th positions
odd_filt <- filter(oddballs, enc_pos == '7' | enc_pos == '8' | enc_pos == '11' | enc_pos == '12')
ctrl_filt <- filter(controls, enc_pos == '7' | enc_pos == '8' | enc_pos == '11' | enc_pos == '12')
# Plot them sepparately
# Check out oddballs
plt<-ggplot(odd_filt, aes(fill=list_type, x=enc_pos, y=rec_pos, color=list_type))+
geom_jitter()+
scale_y_continuous(breaks=c(0,1,2,3,4,5,6,7, 8, 9, 10, 11, 12, 13, 14))+
scale_x_continuous(breaks=c(7,8,11,12))
# Check out controls
plt<-ggplot(ctrl_filt, aes(fill=list_type, x=enc_pos, y=rec_pos, color=list_type))+
geom_jitter()+
scale_y_continuous(breaks=c(0,1,2,3,4,5,6,7, 8, 9, 10, 11, 12, 13, 14))+
scale_x_continuous(breaks=c(7,8,11,12))
data <- rbind(ctrl_filt, odd_filt)
data_summary <- data %>%
group_by(list_type,item) %>%
get_summary_stats(rec_pos, type='mean_ci')
# data for jitter adding one dot per subject
data.jitter <- data %>%
group_by(list_type,item, subject) %>%
get_summary_stats(rec_pos, type = 'mean_ci')
plot <- ggplot(data_summary, aes(fill=list_type, x=item, y=mean))+
geom_bar(position='dodge', stat='identity')+
geom_errorbar(aes(x=item, ymin=mean-ci, ymax=mean+ci), width=0.4, color='wheat4', size=0.5, position=position_dodge(0.9), stat='identity')+
geom_jitter(data=data.jitter,aes(color=list_type, x=item, y=mean), position=position_jitterdodge(dodge.width = 0.9), show.legend=FALSE, alpha=0.2)+
guides(col=FALSE)+
scale_color_manual(values=c('orchid', 'deepskyblue'))+
scale_fill_manual(values=c('thistle1', 'lightblue1'), labels = c('Emotional', 'Perceptual'), name= 'List Type')+
scale_x_discrete(labels=c('Control', 'Oddball'))+
scale_y_continuous(breaks=c(1,2,3,4,5,6,7, 8, 9, 10, 11, 12, 13, 14))+
labs(x='Item type', y='Output position')+
theme_classic()+
theme(text=element_text(size=25))
plot
data_stats<- data %>%
group_by(subject,item,list_type) %>%
get_summary_stats(rec_pos, type='mean_ci')
data_stats$mean <- as.numeric(data_stats$mean)
data_stats$subject <- as.factor(data_stats$subject)
data_stats$item <- as.factor(data_stats$item)
data_stats$list_type <-as.factor(data_stats$list_type)
output.QQ<-ggqqplot(data_stats,'mean',ggtheme=theme_bw())+
facet_grid(list_type~item, labeller='label_both')
data_stats %>% levene_test(mean ~ list_type*item)
data_aov<-anova_test(data=data_stats, dv=mean, wid=subject,
within=c(list_type,item),
)
get_anova_table(data_aov)
#write.csv(data_stats,"/output.csv", row.names = FALSE)
# Transitions from oddballs
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP/Raw_Results")
TFCRP<-read.csv('ToFrom_CRP_R.csv')
TFCRP<-as.data.frame(TFCRP)
#head(TFCRP) #to show you what my raw data looks like
TFplot<-TFCRP %>%
group_by(oddballtype,wordposition, direction,transition) %>%
get_summary_stats(CRP,type='mean_ci')
wpplot<-numeric(0)
for (rows in 1:nrow(TFplot)){
if (TFplot$direction[rows] == "Backwards") {
wpplot[rows]<-(TFplot$wordposition[rows])*-1
}
else {wpplot[rows]<-(TFplot$wordposition[rows])
}
}
invisible(as.data.frame(wpplot))
TFplot$wpplot<-wpplot
TFplot$transition<-factor(TFplot$transition, levels=c('to','from'))
transition.labs<- c('Transition TO the oddball', 'Transition FROM the oddball')
names(transition.labs)<-c('to', 'from')
TFplot <- filter(TFplot, transition == 'from')
TFplot <- droplevels(TFplot)
# Transitions from controls
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP/Raw_Results")
TFCRPctrl<-read.csv('control_ToFrom_CRP_R.csv')
TFCRPctrl<-as.data.frame(TFCRPctrl)
#head(TFCRP) #to show you what my raw data looks like
ctrlTFplot<-TFCRPctrl %>%
group_by(oddballtype,wordposition, direction,transition) %>%
get_summary_stats(CRP,type='mean_ci')
ctrlwpplot<-numeric(0)
for (rows in 1:nrow(ctrlTFplot)){
if (ctrlTFplot$direction[rows] == "Backwards") {
ctrlwpplot[rows]<-(ctrlTFplot$wordposition[rows])*-1
}
else {ctrlwpplot[rows]<-(ctrlTFplot$wordposition[rows])
}
}
invisible(as.data.frame(ctrlwpplot))
ctrlTFplot$ctrlwpplot<-ctrlwpplot
ctrlTFplot$transition<-factor(ctrlTFplot$transition, levels=c('to','from'))
ctrlTFplot <- filter(ctrlTFplot, transition == 'from')
ctrlTFplot <- droplevels(ctrlTFplot)
# Rename the from to oddball / control to concatenate the lists for plotting
TFplot$transition <- as.character(TFplot$transition)
TFplot["transition"][TFplot["transition"] == "from"] <- "oddball"
TFplot$transition <- as.factor(TFplot$transition)
ctrlTFplot$transition <- as.character(ctrlTFplot$transition)
ctrlTFplot["transition"][ctrlTFplot["transition"] == "from"] <- "control"
names(ctrlTFplot)[names(ctrlTFplot) == "ctrlwpplot"] <- "wpplot"
ctrlTFplot$transition <- as.factor(ctrlTFplot$transition)
data <- rbind(TFplot, ctrlTFplot)
transition.labs<- c('Transition from oddballs', 'Transition from controls')
names(transition.labs)<-c('oddball', 'control')
pltTF<-ggplot(data,aes(x=wpplot,y=mean), group=oddballtype)+
geom_line(aes(color=oddballtype), size=1) +
geom_point(aes(color=oddballtype), size=2) +
geom_ribbon(aes(ymin=mean-ci, ymax=mean+ci, fill=oddballtype), alpha=0.2, show.legend = FALSE, inherit.aes=TRUE)+
#geom_errorbar(aes(ymin=mean-se, ymax=mean+se,color=oddballtype), alpha=0.5)+
theme_classic()+
facet_grid(transition~direction, scales='free_x',
labeller=labeller(transition = as_labeller(transition.labs)))+
theme(strip.background = element_blank())+
theme(text=element_text(size=17))+
xlab('Lag') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),
labels=c('Emotional','Perceptual'), name='Oddball List Type', aesthetics=c('colour','fill'))+
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
pltTF
#Compare the averaged (+- 5 lags) transitions to and from the oddballs vs. the control items
CRP_odd_v_ctrl<-read.csv('CRP_avgd_oddballvcontrol.csv')
CRP_odd_v_ctrl<-as.data.frame(CRP_odd_v_ctrl)
CRP_odd_v_ctrl$subject<-as.factor(CRP_odd_v_ctrl$subject)
CRP_odd_v_ctrl$oddballtype<-as.factor(CRP_odd_v_ctrl$oddballtype)
CRP_odd_v_ctrl$transition<-as.factor(CRP_odd_v_ctrl$transition)
CRP_odd_v_ctrl$direction<-as.factor(CRP_odd_v_ctrl$direction)
CRP_odd_v_ctrl$item_type<-as.factor(CRP_odd_v_ctrl$item_type)
transition.labs<- c('Transitions from the target items')
names(transition.labs)<-c('from')
CRP_odd_v_ctrl <- filter(CRP_odd_v_ctrl, transition == 'from')
CRP_odd_v_ctrl <- droplevels(CRP_odd_v_ctrl)
########## 3 way ANOVA #
CRP_odd_v_ctrl$CRPmean <- as.numeric(CRP_odd_v_ctrl$CRPmean)
CRP_odd_v_ctrl$direction <- as.factor(CRP_odd_v_ctrl$direction)
CRP_odd_v_ctrl$oddballtype <- as.factor(CRP_odd_v_ctrl$oddballtype)
CRP_odd_v_ctrl$item_type <- as.factor(CRP_odd_v_ctrl$item_type)
#ggqqplot(CRP_odd_v_ctrl,'CRPmean',ggtheme=theme_bw())+
# facet_grid(oddballtype~item_type+direction, labeller='label_both')
crp.3way <- anova_test(data=CRP_odd_v_ctrl, dv=CRPmean, wid=subject,
within=c(oddballtype,item_type,direction), effect.size = 'pes'
)
get_anova_table(crp.3way)
#post-hoc tests
CRP_odd_v_ctrl %>%
group_by(oddballtype,direction) %>%
pairwise_t_test(CRPmean~item_type, paired=TRUE, p.adjust.method='fdr')
CRP_odd_v_ctrl %>%
group_by(oddballtype,direction) %>%
cohens_d(CRPmean~item_type, paired=TRUE)
###
plt <- CRP_odd_v_ctrl %>%
group_by(oddballtype, item_type, transition, direction) %>%
get_summary_stats(CRPmean, type = 'mean_ci')
pltTF.collapsed<-ggplot(plt,aes(x=direction,y=mean, group=oddballtype, shape= item_type, color = oddballtype,  ymin=mean-ci, ymax=mean+ci))+
geom_pointrange(position=position_dodge2(width=0.5), size=1)+
theme_classic()+
facet_grid(~transition, scales='free_x',
labeller=labeller(transition = as_labeller(transition.labs)))+
theme(text=element_text(size=25))+
theme(strip.background = element_blank())+
xlab('Collapsed Lag (± 5 lags)') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),
labels=c('Emotional','Perceptual'), name='Oddball List Type')+
scale_shape_manual(name = "Item Type",
labels = c("Control", "Oddball"),
values=c(16,17))
pltTF.collapsed
# Run statistics
fwrd <- CRP_odd_v_ctrl
fwrd$CRPmean <- as.numeric(fwrd$CRPmean)
# only select forward transitions as this is what we're interested in
fwrd <- filter(fwrd, direction == 'forwards')
#
fwrd$direction <- as.factor(fwrd$direction)
fwrd$oddballtype <- as.factor(fwrd$oddballtype)
fwrd$item_type <- as.factor(fwrd$item_type)
fwrd <- droplevels(fwrd)
#ggqqplot(fwrd,'CRPmean',ggtheme=theme_bw())+
#facet_grid(oddballtype~item_type, labeller='label_both')
transitions_aov<-anova_test(data=fwrd, dv=CRPmean, wid=subject,
within=c(oddballtype,item_type), effect.size = 'pes'
)
get_anova_table(transitions_aov)
fwrd %>%
group_by(oddballtype) %>%
pairwise_t_test(CRPmean~item_type, paired=TRUE, p.adjust.method='fdr')
fwrd %>%
group_by(oddballtype) %>%
cohens_d(CRPmean~item_type, paired=TRUE)
# For completion check backward transitions
bkwrd <- CRP_odd_v_ctrl
bkwrd$CRPmean <- as.numeric(bkwrd$CRPmean)
# only select forward transitions as this is what we're interested in
bkwrd <- filter(bkwrd, direction == 'backwards')
#
bkwrd$direction <- as.factor(bkwrd$direction)
bkwrd$oddballtype <- as.factor(bkwrd$oddballtype)
bkwrd$item_type <- as.factor(bkwrd$item_type)
bkwrd <- droplevels(bkwrd)
#ggqqplot(bkwrd,'CRPmean',ggtheme=theme_bw())+
# facet_grid(oddballtype~item_type, labeller='label_both')
bckwrd_transitions_aov<-anova_test(data=bkwrd, dv=CRPmean, wid=subject,
within=c(oddballtype,item_type), effect.size = 'pes'
)
get_anova_table(bckwrd_transitions_aov)
bkwrd %>%
group_by(oddballtype) %>%
pairwise_t_test(CRPmean~item_type, paired=TRUE, p.adjust.method='fdr')
bkwrd %>%
group_by(oddballtype) %>%
cohens_d(CRPmean~item_type, paired=TRUE)
pltTF.collapsed
pltTF
pltTF<-ggplot(data,aes(x=wpplot,y=mean), group=oddballtype)+
geom_line(aes(color=oddballtype), size=1) +
geom_point(aes(color=oddballtype), size=2) +
geom_ribbon(aes(ymin=mean-ci, ymax=mean+ci, fill=oddballtype), alpha=0.2, show.legend = FALSE, inherit.aes=TRUE)+
#geom_errorbar(aes(ymin=mean-se, ymax=mean+se,color=oddballtype), alpha=0.5)+
theme_classic()+
facet_grid(transition~direction, scales='free_x',
labeller=labeller(transition = as_labeller(transition.labs)))+
theme(strip.background = element_blank())+
theme(text=element_text(size=25))+
xlab('Lag') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),
labels=c('Emotional','Perceptual'), name='Oddball List Type', aesthetics=c('colour','fill'))+
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
pltTF
pltTF
pltTF<-ggplot(data,aes(x=wpplot,y=mean), group=oddballtype)+
geom_line(aes(color=oddballtype), size=1) +
geom_point(aes(color=oddballtype), size=2) +
geom_ribbon(aes(ymin=mean-ci, ymax=mean+ci, fill=oddballtype), alpha=0.2, show.legend = FALSE, inherit.aes=TRUE)+
#geom_errorbar(aes(ymin=mean-se, ymax=mean+se,color=oddballtype), alpha=0.5)+
theme_classic()+
facet_grid(transition~direction, scales='free_x',
labeller=labeller(transition = as_labeller(transition.labs)))+
theme(strip.background = element_blank())+
theme(text=element_text(size=17))+
xlab('Lag') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),
labels=c('Emotional','Perceptual'), name='Oddball List Type', aesthetics=c('colour','fill'))+
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
pltTF
transition.labs<- c('Transition from oddballs', 'Transition from controls')
names(transition.labs)<-c('oddball', 'control')
pltTF<-ggplot(data,aes(x=wpplot,y=mean), group=oddballtype)+
geom_line(aes(color=oddballtype), size=1) +
geom_point(aes(color=oddballtype), size=2) +
geom_ribbon(aes(ymin=mean-ci, ymax=mean+ci, fill=oddballtype), alpha=0.2, show.legend = FALSE, inherit.aes=TRUE)+
#geom_errorbar(aes(ymin=mean-se, ymax=mean+se,color=oddballtype), alpha=0.5)+
theme_classic()+
facet_grid(transition~direction, scales='free_x',
labeller=labeller(transition = as_labeller(transition.labs)))+
theme(strip.background = element_blank())+
theme(text=element_text(size=17))+
xlab('Lag') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),
labels=c('Emotional','Perceptual'), name='Oddball List Type', aesthetics=c('colour','fill'))+
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
pltTF
pltTF<-ggplot(data,aes(x=wpplot,y=mean), group=oddballtype)+
geom_line(aes(color=oddballtype), size=1) +
geom_point(aes(color=oddballtype), size=2) +
geom_ribbon(aes(ymin=mean-ci, ymax=mean+ci, fill=oddballtype), alpha=0.2, show.legend = FALSE, inherit.aes=TRUE)+
#geom_errorbar(aes(ymin=mean-se, ymax=mean+se,color=oddballtype), alpha=0.5)+
theme_classic()+
facet_grid(transition~direction, scales='free_x',
labeller=labeller(transition = as_labeller(transition.labs)))+
theme(strip.background = element_blank())+
theme(text=element_text(size=25))+
xlab('Lag') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),
labels=c('Emotional','Perceptual'), name='Oddball List Type', aesthetics=c('colour','fill'))+
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
pltTF
pltTF
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Code_Reviewed/PerisYague2023/Raw_Results")
CRPall<-read.csv('CRP_all_R.csv')
CRPall<-as.data.frame(CRPall)
crpplot<-CRPall %>%
group_by(oddballtype,wordposition, direction) %>%
get_summary_stats(CRP,type='mean_ci')
## This is needed to make the 'backwards' lags negative so that they plot
# correctly
wpplot<-numeric(0)
for (rows in 1:nrow(crpplot)){
if (crpplot$direction[rows] == "Backwards") {
wpplot[rows]<-(crpplot$wordposition[rows])*-1
}
else {wpplot[rows]<-(crpplot$wordposition[rows])
}
}
invisible(as.data.frame(wpplot))
crpplot$wpplot<-wpplot
pltCRP<-ggplot(crpplot,aes(x=wpplot,y=mean), group=oddballtype)+
geom_line(aes(color=oddballtype), size=1) +
geom_point(aes(color=oddballtype), size=2,) +
geom_ribbon(aes(x=wpplot, ymin=mean-ci, ymax=mean+ci, fill=oddballtype), alpha=0.3, show.legend = FALSE)+
#geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci,color=oddballtype), alpha=0.5)+
theme_classic()+
facet_wrap(~ direction, scales='free_x', ncol=2)+
theme(strip.background = element_blank())+
theme(text=element_text(size=25))+
#ggtitle('CRP all')+
xlab('Lag') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),aesthetics = c('colour','fill'),
labels=c('Emotional','Perceptual'), name='Oddball List Type')+
scale_y_continuous(labels = scales::number_format(accuracy = 0.01))
pltCRP
pltCRP
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Code_Reviewed/PerisYague2023/Raw_Results")
emorating<-read.csv('EmotionalRatings_preproc.csv')
emorating<-as.data.frame(emorating)
emorating$subject <- as.factor(emorating$subject)
emorating$age <- as.numeric(emorating$age)
emorating$gender <- as.factor(emorating$gender)
emorating$word <- as.factor(emorating$word)
emorating$salience <- as.factor(emorating$salience)
emorating$list <- as.factor(emorating$list)
emorating$rating <- as.numeric(emorating$rating)
emorating <- droplevels(emorating)
demographics <- c(27,61,27,27,27,26,28,28,35,21,26,24,38,32,22)
demographics.mean <- mean(demographics) # mean age 44
demographics.sd <- sd(demographics) #sd 24.04
data  <- emorating %>%
group_by(subject, salience) %>%
get_summary_stats(rating, type = 'mean_ci')
data %>%
pairwise_t_test(mean~salience, paired=TRUE, p.adjust.method='fdr')
data %>%
cohens_d(mean~salience, paired=TRUE)
plt <- ggboxplot(data, x='salience', y = 'mean')
words  <- emorating %>%
group_by(word) %>%
get_summary_stats(rating, type = 'mean_sd')
path_out<-'/Raw_Results/'
#write.csv(words,paste(path_out,'emotional_ratings_mean.csv',sep = ''))
data %>%
pairwise_t_test(mean~salience, paired=TRUE, p.adjust.method='fdr')
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Code_Reviewed/PerisYague2023/Raw_Results")
semrating<-read.csv('SemanticRelatedness_preproc.csv')
semrating<-as.data.frame(semrating)
semrating$subject <- as.factor(semrating$subject)
semrating$age <- as.numeric(semrating$age)
semrating$gender <- as.factor(semrating$gender)
semrating$word <- as.factor(semrating$word)
semrating$list <- as.factor(semrating$list)
semrating$oddtype <- as.factor(semrating$oddtype)
semrating$rating <- as.numeric(semrating$rating)
semrating <- droplevels(semrating)
demographics <- c(24,62,60,28,27,30,27,21,26,27,32,27,31,24)
demographics.mean <- mean(demographics) # mean age 44
demographics.sd <- sd(demographics) #sd 24.04
data  <- semrating %>%
group_by(subject, oddtype) %>%
get_summary_stats(rating, type = 'mean_ci')
data <-droplevels(data)
semrating_aov<-anova_test(data=data, dv=mean, wid=subject,
within=c(oddtype), effect.size = 'pes'
)
get_anova_table(semrating_aov)
data %>%
pairwise_t_test(mean~oddtype, paired=TRUE, p.adjust.method='fdr')
data %>%
cohens_d(mean~oddtype, paired=TRUE)
plt <- ggboxplot(data, x='oddtype', y = 'mean')
words  <- semrating %>%
group_by(word) %>%
get_summary_stats(rating, type = 'mean_sd')
path_out<-'/Raw_Results/'
#write.csv(words,paste(path_out,'semantic_ratings_mean.csv',sep = ''))
get_anova_table(semrating_aov)
data %>%
pairwise_t_test(mean~oddtype, paired=TRUE, p.adjust.method='fdr')
data %>%
cohens_d(mean~oddtype, paired=TRUE)
plt <- ggboxplot(data, x='oddtype', y = 'mean')
plt
