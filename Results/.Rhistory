theme_classic()+
facet_wrap(~ direction, scales='free_x', ncol=2)+
theme(strip.background = element_blank())+
theme(text=element_text(size=17))+
#ggtitle('CRP all')+
xlab('Lag') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),aesthetics = c('colour','fill'),
labels=c('Emotional','Perceptual'), name='Oddball List Type')+
scale_y_continuous(labels = scales::number_format(accuracy = 0.01))
pltCRP
CRPall$subject<-factor(CRPall$subject)
CRPall$oddballtype<-factor(CRPall$oddballtype)
CRPall$direction<-factor(CRPall$direction)
CRPall$wordposition<-factor(CRPall$wordposition)
#Check for normality and homogeneity of variances
CRP.QQ<-ggqqplot(CRPall,'CRP',ggtheme=theme_bw())+
facet_grid(oddballtype+direction~wordposition, labeller='label_both')
#CRP.QQ # looks fine
#If homogeneity of variances is violated, sphericity is automatically corrected in get_anova_table with Greenhouse-Geisser correction.
#Run RM ANOVA
CRPall.aov<-anova_test(
data=CRPall,dv=CRP,wid=subject,
within=c(oddballtype,wordposition,direction)
)
#CRPall.aov
get_anova_table(CRPall.aov)
#Interaction word position x direction
WpxDir.data<-aggregate(x = CRPall$CRP, by = list(wordposition=CRPall$wordposition, direction=CRPall$direction, subject=CRPall$subject), FUN = "mean")
WpxDir.pwc1<- WpxDir.data %>%
group_by(direction) %>%
pairwise_t_test(x~wordposition,paired=TRUE, p.adjust.method='fdr')
WpxDir.pwc1
WpxDir.data %>%
group_by(direction, wordposition) %>%
get_summary_stats(x, type='mean_sd')
WpxDir.data %>%
group_by(direction) %>%
cohens_d(x~wordposition, paired=TRUE)
WpxDir.pwc2<- WpxDir.data %>%
group_by(wordposition) %>%
pairwise_t_test(x~direction,paired=TRUE, p.adjust.method='fdr')
WpxDir.pwc2
WpxDir.data %>%
group_by(wordposition) %>%
cohens_d(x~direction, paired=TRUE)
setwd("/Users/albaperis/Desktop/Alba/PhDUPM /Von Restroff WP3/Paper_github/Odd_SOA_CRP/Raw_Results")
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Submitted/Raw_Results")
CRPSOA<-read.csv('all_CRP_SOA_R.csv')
CRPSOA<-as.data.frame(CRPSOA)
CRPSOAplot<-CRPSOA %>%
group_by(wordposition, direction, SOA) %>%
get_summary_stats(CRP,type='mean_ci')
wpplot<-numeric(0)
for (rows in 1:nrow(CRPSOAplot)){
if (CRPSOAplot$direction[rows] == "Backwards") {
wpplot[rows]<-(CRPSOAplot$wordposition[rows])*-1
}
else {wpplot[rows]<-(CRPSOAplot$wordposition[rows])
}
}
invisible(as.data.frame(wpplot))
CRPSOAplot$wpplot<-wpplot
#factor all the categorical variables
CRPSOA$SOA<-factor(CRPSOA$SOA)
CRPSOA$direction<-factor(CRPSOA$direction)
CRPSOA$wordposition<-factor(CRPSOA$wordposition)
CRPSOA$subject<-factor(CRPSOA$subject)
CRPSOA$oddballtype<-factor(CRPSOA$oddballtype)
pltCRPSOA<-ggplot(CRPSOAplot,aes(x=wpplot,y=mean, group=SOA, color=as.factor(SOA)))+
geom_line(size=1) +
geom_point(size=2) +
geom_ribbon(aes(ymin=mean-ci, ymax=mean+ci, fill=as.factor(SOA)), alpha=0.2, show.legend = FALSE, inherit.aes=TRUE)+
#geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci,color=as.factor(SOA)), alpha=0.5)+
theme_classic()+
facet_wrap(~ direction, scales='free_x', ncol=2)+
theme(strip.background = element_blank())+
theme(text=element_text(size=17))+
xlab('Lag') +
ylab('Conditional Response Probability')+
scale_color_brewer(palette="Set2", aesthetics = c('colour','fill') )+
labs(color='SOA')+
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
pltCRPSOA
CRP.SOA.data<-aggregate(x = CRPSOA$CRP, by = list(SOA=CRPSOA$SOA, direction=CRPSOA$direction, subject=CRPSOA$subject), FUN = "mean")
#subset data only in the forwards direction
CRP.SOA.data<-as.data.frame(subset(CRP.SOA.data, direction=='Forwards'))
CRP.SOA.QQ<-ggqqplot(CRP.SOA.data,'x',ggtheme=theme_bw())+
facet_grid(~SOA, labeller='label_both')
#Run a one-way ANOVA
CRPall.SOA.aov<-anova_test(
data=CRP.SOA.data,dv=x,wid=subject,
within=c(SOA)
)
#CRPall.SOA.aov
get_anova_table(CRPall.SOA.aov)
#Run follow-up t-tests
SOA.pwc<- CRP.SOA.data %>%
pairwise_t_test(x~SOA,paired=TRUE, p.adjust.method='fdr')
SOA.pwc
CRP.SOA.data %>%
group_by(SOA) %>%
get_summary_stats(x,type = 'mean_sd')
CRP.SOA.data %>%
cohens_d(x~SOA, paired=TRUE)
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP/Raw_Results")
TFCRP<-read.csv('control_ToFrom_CRP_R.csv')
TFCRP<-as.data.frame(TFCRP)
#head(TFCRP) #to show you what my raw data looks like
TFplot<-TFCRP %>%
group_by(oddballtype,wordposition, direction,transition) %>%
get_summary_stats(CRP,type='mean_ci')
wpplot<-numeric(0)
for (rows in 1:nrow(TFplot)){
if (TFplot$direction[rows] == "Backwards") {
wpplot[rows]<-(TFplot$wordposition[rows])*-1
}
else {wpplot[rows]<-(TFplot$wordposition[rows])
}
}
invisible(as.data.frame(wpplot))
TFplot$wpplot<-wpplot
TFplot$transition<-factor(TFplot$transition, levels=c('to','from'))
transition.labs<- c('Transition TO the control', 'Transition FROM the control')
names(transition.labs)<-c('to', 'from')
pltTF<-ggplot(TFplot,aes(x=wpplot,y=mean), group=oddballtype)+
geom_line(aes(color=oddballtype), size=1, linetype = 'dashed') +
geom_point(aes(color=oddballtype), size=2) +
geom_ribbon(aes(ymin=mean-ci, ymax=mean+ci, fill=oddballtype), alpha=0.2, show.legend = FALSE, inherit.aes=TRUE)+
theme_classic()+
facet_grid(transition~direction, scales='free_x',
labeller=labeller(transition = as_labeller(transition.labs)))+
theme(strip.background = element_blank())+
theme(text=element_text(size=17))+
xlab('Lag') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),
labels=c('Emotional','Perceptual'), name='Oddball List Type', aesthetics=c('colour','fill'))+
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))+
ylim(NA,0.50)
pltTF
# Only plot the transitions from
#Compare the averaged (+- 5 lags) transitions to and from the oddballs vs. the control items
CRP_odd_v_ctrl<-read.csv('CRP_avgd_oddballvcontrol.csv')
CRP_odd_v_ctrl<-as.data.frame(CRP_odd_v_ctrl)
CRP_odd_v_ctrl$subject<-as.factor(CRP_odd_v_ctrl$subject)
CRP_odd_v_ctrl$oddballtype<-as.factor(CRP_odd_v_ctrl$oddballtype)
CRP_odd_v_ctrl$transition<-as.factor(CRP_odd_v_ctrl$transition)
CRP_odd_v_ctrl$direction<-as.factor(CRP_odd_v_ctrl$direction)
CRP_odd_v_ctrl$item_type<-as.factor(CRP_odd_v_ctrl$item_type)
transition.labs<- c('Transition TO the oddball', 'Transition FROM the oddball')
names(transition.labs)<-c('to', 'from')
plt <- CRP_odd_v_ctrl %>%
group_by(oddballtype, item_type, transition, direction) %>%
get_summary_stats(CRPmean, type = 'mean_ci')
pltTF.collapsed<-ggplot(plt,aes(x=direction,y=mean, group=oddballtype, shape= item_type, color = oddballtype,  ymin=mean-ci, ymax=mean+ci))+
geom_pointrange(position=position_dodge2(width=0.5), size=1)+
theme_classic()+
facet_grid(~transition, scales='free_x',
labeller=labeller(transition = as_labeller(transition.labs)))+
theme(text=element_text(size=17))+
theme(strip.background = element_blank())+
xlab('Collapsed Lag') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),
labels=c('Emotional','Perceptual'), name='Oddball Type')
scale_color_brewer(palette='Set2')
# Organize the data for JASP
data <- CRP_odd_v_ctrl %>%
group_by(oddballtype, item_type, transition, direction, subject) %>%
get_summary_stats(CRPmean, type='mean_ci')
# Convert the data to wide
data.wide <- dcast(data, subject ~  oddballtype + transition + direction + item_type, value.var = "mean", drop = FALSE)
path_out<- '/Users/albaperis/Desktop/Alba/PhDUPM /Von Restroff WP3/Paper_github/Odd_SOA_CRP/Raw_Results/'
#write.csv(data.wide, paste(path_out,'TovFrom_OddballvControl_JASP.csv',sep = ''))
# Transitions from oddballs
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP/Raw_Results")
TFCRP<-read.csv('ToFrom_CRP_R.csv')
TFCRP<-as.data.frame(TFCRP)
#head(TFCRP) #to show you what my raw data looks like
TFplot<-TFCRP %>%
group_by(oddballtype,wordposition, direction,transition) %>%
get_summary_stats(CRP,type='mean_ci')
wpplot<-numeric(0)
for (rows in 1:nrow(TFplot)){
if (TFplot$direction[rows] == "Backwards") {
wpplot[rows]<-(TFplot$wordposition[rows])*-1
}
else {wpplot[rows]<-(TFplot$wordposition[rows])
}
}
invisible(as.data.frame(wpplot))
TFplot$wpplot<-wpplot
TFplot$transition<-factor(TFplot$transition, levels=c('to','from'))
transition.labs<- c('Transition TO the oddball', 'Transition FROM the oddball')
names(transition.labs)<-c('to', 'from')
TFplot <- filter(TFplot, transition == 'from')
TFplot <- droplevels(TFplot)
# Transitions from controls
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP/Raw_Results")
TFCRPctrl<-read.csv('control_ToFrom_CRP_R.csv')
TFCRPctrl<-as.data.frame(TFCRPctrl)
#head(TFCRP) #to show you what my raw data looks like
ctrlTFplot<-TFCRPctrl %>%
group_by(oddballtype,wordposition, direction,transition) %>%
get_summary_stats(CRP,type='mean_ci')
ctrlwpplot<-numeric(0)
for (rows in 1:nrow(ctrlTFplot)){
if (ctrlTFplot$direction[rows] == "Backwards") {
ctrlwpplot[rows]<-(ctrlTFplot$wordposition[rows])*-1
}
else {ctrlwpplot[rows]<-(ctrlTFplot$wordposition[rows])
}
}
invisible(as.data.frame(ctrlwpplot))
ctrlTFplot$ctrlwpplot<-ctrlwpplot
ctrlTFplot$transition<-factor(ctrlTFplot$transition, levels=c('to','from'))
ctrlTFplot <- filter(ctrlTFplot, transition == 'from')
ctrlTFplot <- droplevels(ctrlTFplot)
# Rename the from to oddball / control to concatenate the lists for plotting
TFplot$transition <- as.character(TFplot$transition)
TFplot["transition"][TFplot["transition"] == "from"] <- "oddball"
TFplot$transition <- as.factor(TFplot$transition)
ctrlTFplot$transition <- as.character(ctrlTFplot$transition)
ctrlTFplot["transition"][ctrlTFplot["transition"] == "from"] <- "control"
names(ctrlTFplot)[names(ctrlTFplot) == "ctrlwpplot"] <- "wpplot"
ctrlTFplot$transition <- as.factor(ctrlTFplot$transition)
data <- rbind(TFplot, ctrlTFplot)
transition.labs<- c('Transition from oddballs', 'Transition from controls')
names(transition.labs)<-c('oddball', 'control')
pltTF<-ggplot(data,aes(x=wpplot,y=mean), group=oddballtype)+
geom_line(aes(color=oddballtype), size=1) +
geom_point(aes(color=oddballtype), size=2) +
geom_ribbon(aes(ymin=mean-ci, ymax=mean+ci, fill=oddballtype), alpha=0.2, show.legend = FALSE, inherit.aes=TRUE)+
#geom_errorbar(aes(ymin=mean-se, ymax=mean+se,color=oddballtype), alpha=0.5)+
theme_classic()+
facet_grid(transition~direction, scales='free_x',
labeller=labeller(transition = as_labeller(transition.labs)))+
theme(strip.background = element_blank())+
theme(text=element_text(size=17))+
#ggtitle('CRP transitions to and from the oddballs')+
xlab('Lag') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),
labels=c('Emotional','Perceptual'), name='Oddball List Type', aesthetics=c('colour','fill'))+
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
pltTF
#Compare the averaged (+- 5 lags) transitions to and from the oddballs vs. the control items
CRP_odd_v_ctrl<-read.csv('CRP_avgd_oddballvcontrol.csv')
CRP_odd_v_ctrl<-as.data.frame(CRP_odd_v_ctrl)
CRP_odd_v_ctrl$subject<-as.factor(CRP_odd_v_ctrl$subject)
CRP_odd_v_ctrl$oddballtype<-as.factor(CRP_odd_v_ctrl$oddballtype)
CRP_odd_v_ctrl$transition<-as.factor(CRP_odd_v_ctrl$transition)
CRP_odd_v_ctrl$direction<-as.factor(CRP_odd_v_ctrl$direction)
CRP_odd_v_ctrl$item_type<-as.factor(CRP_odd_v_ctrl$item_type)
transition.labs<- c('Transitions from the target items')
names(transition.labs)<-c('from')
CRP_odd_v_ctrl <- filter(CRP_odd_v_ctrl, transition == 'from')
CRP_odd_v_ctrl <- droplevels(CRP_odd_v_ctrl)
########## 3 way ANOVA #
CRP_odd_v_ctrl$CRPmean <- as.numeric(CRP_odd_v_ctrl$CRPmean)
CRP_odd_v_ctrl$direction <- as.factor(CRP_odd_v_ctrl$direction)
CRP_odd_v_ctrl$oddballtype <- as.factor(CRP_odd_v_ctrl$oddballtype)
CRP_odd_v_ctrl$item_type <- as.factor(CRP_odd_v_ctrl$item_type)
ggqqplot(CRP_odd_v_ctrl,'CRPmean',ggtheme=theme_bw())+
facet_grid(oddballtype~item_type+direction, labeller='label_both')
crp.3way <- anova_test(data=CRP_odd_v_ctrl, dv=CRPmean, wid=subject,
within=c(oddballtype,item_type,direction), effect.size = 'pes'
)
get_anova_table(crp.3way)
#post-hoc tests
CRP_odd_v_ctrl %>%
group_by(oddballtype,direction) %>%
pairwise_t_test(CRPmean~item_type, paired=TRUE, p.adjust.method='fdr')
CRP_odd_v_ctrl %>%
group_by(oddballtype,direction) %>%
cohens_d(CRPmean~item_type, paired=TRUE)
###
plt <- CRP_odd_v_ctrl %>%
group_by(oddballtype, item_type, transition, direction) %>%
get_summary_stats(CRPmean, type = 'mean_ci')
pltTF.collapsed<-ggplot(plt,aes(x=direction,y=mean, group=oddballtype, shape= item_type, color = oddballtype,  ymin=mean-ci, ymax=mean+ci))+
geom_pointrange(position=position_dodge2(width=0.5), size=1)+
theme_classic()+
facet_grid(~transition, scales='free_x',
labeller=labeller(transition = as_labeller(transition.labs)))+
theme(text=element_text(size=17))+
theme(strip.background = element_blank())+
xlab('Collapsed Lag (± 5 lags)') +
ylab('Conditional Response Probability')+
scale_color_manual(values=c('violetred2','turquoise2'),
labels=c('Emotional','Perceptual'), name='Oddball Type')+
scale_shape_manual(name = "Item Type",
labels = c("Control", "Oddball"),
values=c(16,17))
pltTF.collapsed
# Run statistics
fwrd <- CRP_odd_v_ctrl
fwrd$CRPmean <- as.numeric(fwrd$CRPmean)
# only select forward transitions as this is what we're interested in
fwrd <- filter(fwrd, direction == 'forwards')
#
fwrd$direction <- as.factor(fwrd$direction)
fwrd$oddballtype <- as.factor(fwrd$oddballtype)
fwrd$item_type <- as.factor(fwrd$item_type)
fwrd <- droplevels(fwrd)
ggqqplot(fwrd,'CRPmean',ggtheme=theme_bw())+
facet_grid(oddballtype~item_type, labeller='label_both')
transitions_aov<-anova_test(data=fwrd, dv=CRPmean, wid=subject,
within=c(oddballtype,item_type), effect.size = 'pes'
)
get_anova_table(transitions_aov)
fwrd %>%
group_by(oddballtype) %>%
pairwise_t_test(CRPmean~item_type, paired=TRUE, p.adjust.method='fdr')
fwrd %>%
group_by(oddballtype) %>%
cohens_d(CRPmean~item_type, paired=TRUE)
# For completion check backward transitions
bkwrd <- CRP_odd_v_ctrl
bkwrd$CRPmean <- as.numeric(bkwrd$CRPmean)
# only select forward transitions as this is what we're interested in
bkwrd <- filter(bkwrd, direction == 'backwards')
#
bkwrd$direction <- as.factor(bkwrd$direction)
bkwrd$oddballtype <- as.factor(bkwrd$oddballtype)
bkwrd$item_type <- as.factor(bkwrd$item_type)
bkwrd <- droplevels(bkwrd)
ggqqplot(bkwrd,'CRPmean',ggtheme=theme_bw())+
facet_grid(oddballtype~item_type, labeller='label_both')
bckwrd_transitions_aov<-anova_test(data=bkwrd, dv=CRPmean, wid=subject,
within=c(oddballtype,item_type), effect.size = 'pes'
)
get_anova_table(bckwrd_transitions_aov)
bkwrd %>%
group_by(oddballtype) %>%
pairwise_t_test(CRPmean~item_type, paired=TRUE, p.adjust.method='fdr')
bkwrd %>%
group_by(oddballtype) %>%
cohens_d(CRPmean~item_type, paired=TRUE)
pltTF
get_anova_table(crp.3way)
pltTF.collapsed
get_anova_table(transitions_aov)
fwrd %>%
group_by(oddballtype) %>%
pairwise_t_test(CRPmean~item_type, paired=TRUE, p.adjust.method='fdr')
get_anova_table(bckwrd_transitions_aov)
setwd("/Users/albaperis/Desktop/Alba/PhDUPM /Von Restroff WP3/Paper_github/Odd_SOA_CRP/Raw_Results")
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Submitted/Raw_Results")
listrecallSOA<-read.csv('list_recall_SOA_R.csv')
listrecallSOA<-as.data.frame(listrecallSOA)
listrecallSOA$SOA<-factor(listrecallSOA$SOA)
listrecallSOA$subject<-factor(listrecallSOA$subject)
listrecallSOAplot<-listrecallSOA %>%
group_by(SOA) %>%
get_summary_stats(total_recall_list,type='mean_ci')
# Plot
list.recall.SOA.fig2<-ggplot(data=listrecallSOAplot, aes(x=as.factor(SOA), y=mean, color=SOA, min=mean-ci, ymax=mean+ci))+
geom_pointrange(position=position_dodge(width=0.5), shape=15, size=1)+
scale_color_brewer(palette="Set2")+
scale_y_continuous(n.breaks=10)+
theme_classic()+
labs(x='Stimulus Onset Asynchrony', y='Average amount of items recalled')+
theme(text=element_text(size=17))+
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
list.recall.SOA.fig2
listrecallSOA.data<- listrecallSOA %>%
group_by(SOA,subject) %>%
get_summary_stats(total_recall_list, type='mean')
listrecallSOA.data<-listrecallSOA.data[-c(3,4)]
names(listrecallSOA.data)[3] <- "total_recall_list"
listrecallSOA.data<-as.data.frame(listrecallSOA.data)
listrecallSOA.data$SOA<-as.factor(listrecallSOA.data$SOA)
listrecallSOA.data$subject<-as.factor(listrecallSOA.data$subject)
listrecallSOA.data$total_recall_list<-as.numeric(listrecallSOA.data$total_recall_list)
#Check normal distribution
list.recall.SOA.QQ<-ggqqplot(listrecallSOA.data,'total_recall_list',ggtheme=theme_bw())+
facet_grid(~SOA, labeller='label_both')
#list.recall.SOA.QQ# looks fine
# Run an ANOVA
listrecallSOA.aov<-anova_test(
data=listrecallSOA.data,dv=total_recall_list,wid=subject,
within=c(SOA),
)
get_anova_table(listrecallSOA.aov)
listrecallSOA.wide<-reshape(listrecallSOA, idvar = 'subject', timevar = 'SOA', direction = 'wide')
names(listrecallSOA.wide)[2] <- "SOA 6"
names(listrecallSOA.wide)[3] <- "SOA 3"
names(listrecallSOA.wide)[4] <- "SOA 2"
names(listrecallSOA.wide)[5] <- "SOA 1"
names(listrecallSOA.wide)[6] <- "SOA 4"
#path_out<-'/Raw_Results/'
#write.csv(listrecallSOA.wide,paste(path_out,'Fig1D_prism.csv',sep = ''))
## Plot recall performance by SOA in %
per100recallbySOA <- listrecallSOA
per100recallbySOA$total_recall_list<-(per100recallbySOA$total_recall_list)/14*100 #Now we have the % of items recalled
listrecallSOAplot2<-per100recallbySOA %>%
group_by(SOA) %>%
get_summary_stats(total_recall_list,type='mean_ci')
per100recallbySOA <-per100recallbySOA %>%
group_by(SOA, subject) %>%
get_summary_stats(total_recall_list, type='mean_ci')
# Plot
list.per100.recall.SOA.fig2<-ggplot(data=listrecallSOAplot2, aes(x=as.factor(SOA), y=mean, color=SOA, ymin=mean-ci, ymax=mean+ci))+
#geom_pointrange(aes(ymin=mean-ci,ymax=mean+ci) ,position=position_dodge(width=0.5), shape=15, size=0.5)+
geom_errorbar(aes(x=SOA, ymin=mean-ci, ymax=mean+ci), width=0.4, size=1, position=position_dodge(0.9), stat='identity')+
geom_point(position=position_dodge(0.9), size=3, shape=20) +
geom_jitter(data=per100recallbySOA,aes(color=SOA, x=SOA, y=mean), position=position_jitterdodge(dodge.width = 0,2),  show.legend=FALSE, alpha=0.3, inherit.aes=F)+
scale_color_brewer(palette="Set2")+
scale_y_continuous(n.breaks=10)+
#geom_hline(yintercept=50, linetype = 'dashed', color = 'grey')+
theme_classic()+
labs(x='Stimulus Onset Asynchrony', y='% items recalled')+
theme(text=element_text(size=17))+
scale_y_continuous(
labels = scales::number_format(accuracy = 1))
list.per100.recall.SOA.fig2
list.per100.recall.SOA.fig2
list.recall.SOA.fig2
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Submitted/Raw_Results")
listrecallSOA<-read.csv('list_recall_SOA_R.csv')
listrecallSOA<-as.data.frame(listrecallSOA)
listrecallSOA$SOA<-factor(listrecallSOA$SOA)
listrecallSOA$subject<-factor(listrecallSOA$subject)
listrecallSOA.data<- listrecallSOA %>%
group_by(SOA,subject) %>%
get_summary_stats(total_recall_list, type='mean')
listrecallSOA.data<-listrecallSOA.data[-c(3,4)]
names(listrecallSOA.data)[3] <- "total_recall_list"
listrecallSOA.data<-as.data.frame(listrecallSOA.data)
listrecallSOA.data$SOA<-as.factor(listrecallSOA.data$SOA)
listrecallSOA.data$subject<-as.factor(listrecallSOA.data$subject)
listrecallSOA.data$total_recall_list<-as.numeric(listrecallSOA.data$total_recall_list)
listrecallSOA.wide<-reshape(listrecallSOA, idvar = 'subject', timevar = 'SOA', direction = 'wide')
names(listrecallSOA.wide)[2] <- "SOA 6"
names(listrecallSOA.wide)[3] <- "SOA 3"
names(listrecallSOA.wide)[4] <- "SOA 2"
names(listrecallSOA.wide)[5] <- "SOA 1"
names(listrecallSOA.wide)[6] <- "SOA 4"
## Plot recall performance by SOA in %
per100recallbySOA <- listrecallSOA
per100recallbySOA$total_recall_list<-(per100recallbySOA$total_recall_list)/14*100 #Now we have the % of items recalled
listrecallSOAplot2<-per100recallbySOA %>%
group_by(SOA) %>%
get_summary_stats(total_recall_list,type='mean_ci')
per100recallbySOA <-per100recallbySOA %>%
group_by(SOA, subject) %>%
get_summary_stats(total_recall_list, type='mean_ci')
# Plot
list.per100.recall.SOA.fig2<-ggplot(data=listrecallSOAplot2, aes(x=as.factor(SOA), y=mean, color=SOA, ymin=mean-ci, ymax=mean+ci))+
#geom_pointrange(aes(ymin=mean-ci,ymax=mean+ci) ,position=position_dodge(width=0.5), shape=15, size=0.5)+
geom_errorbar(aes(x=SOA, ymin=mean-ci, ymax=mean+ci), width=0.4, size=1, position=position_dodge(0.9), stat='identity')+
geom_point(position=position_dodge(0.9), size=3, shape=20) +
geom_jitter(data=per100recallbySOA,aes(color=SOA, x=SOA, y=mean), position=position_jitterdodge(dodge.width = 0,2),  show.legend=FALSE, alpha=0.3, inherit.aes=F)+
scale_color_brewer(palette="Set2")+
scale_y_continuous(n.breaks=10)+
#geom_hline(yintercept=50, linetype = 'dashed', color = 'grey')+
theme_classic()+
labs(x='Stimulus Onset Asynchrony', y='% items recalled')+
theme(text=element_text(size=17))+
scale_y_continuous(
labels = scales::number_format(accuracy = 1))
list.per100.recall.SOA.fig2
setwd("/Users/albaperis/OneDrive - UAM/PhDUPM_/Von Restroff WP3/Paper_github/Odd_SOA_CRP_Submitted/Raw_Results")
listrecallSOA<-read.csv('list_recall_SOA_R.csv')
listrecallSOA<-as.data.frame(listrecallSOA)
listrecallSOA$SOA<-factor(listrecallSOA$SOA)
listrecallSOA$subject<-factor(listrecallSOA$subject)
listrecallSOA.data<- listrecallSOA %>%
group_by(SOA,subject) %>%
get_summary_stats(total_recall_list, type='mean')
listrecallSOA.data<-listrecallSOA.data[-c(3,4)]
names(listrecallSOA.data)[3] <- "total_recall_list"
listrecallSOA.data<-as.data.frame(listrecallSOA.data)
listrecallSOA.data$SOA<-as.factor(listrecallSOA.data$SOA)
listrecallSOA.data$subject<-as.factor(listrecallSOA.data$subject)
listrecallSOA.data$total_recall_list<-as.numeric(listrecallSOA.data$total_recall_list)
listrecallSOA.wide<-reshape(listrecallSOA, idvar = 'subject', timevar = 'SOA', direction = 'wide')
names(listrecallSOA.wide)[2] <- "SOA 6"
names(listrecallSOA.wide)[3] <- "SOA 3"
names(listrecallSOA.wide)[4] <- "SOA 2"
names(listrecallSOA.wide)[5] <- "SOA 1"
names(listrecallSOA.wide)[6] <- "SOA 4"
## Plot recall performance by SOA in %
per100recallbySOA <- listrecallSOA
per100recallbySOA$total_recall_list<-(per100recallbySOA$total_recall_list)/14*100 #Now we have the % of items recalled
listrecallSOAplot2<-per100recallbySOA %>%
group_by(SOA) %>%
get_summary_stats(total_recall_list,type='mean_ci')
per100recallbySOA <-per100recallbySOA %>%
group_by(SOA, subject) %>%
get_summary_stats(total_recall_list, type='mean_ci')
# Plot
list.per100.recall.SOA.fig2<-ggplot(data=listrecallSOAplot2, aes(x=as.factor(SOA), y=mean, color=SOA, ymin=mean-ci, ymax=mean+ci))+
#geom_pointrange(aes(ymin=mean-ci,ymax=mean+ci) ,position=position_dodge(width=0.5), shape=15, size=0.5)+
geom_errorbar(aes(x=SOA, ymin=mean-ci, ymax=mean+ci), width=0.4, size=1, position=position_dodge(0.9), stat='identity')+
geom_point(position=position_dodge(0.9), size=3, shape=20) +
geom_jitter(data=per100recallbySOA,aes(color=SOA, x=SOA, y=mean), position=position_jitterdodge(dodge.width = 0,2),  show.legend=FALSE, alpha=0.3, inherit.aes=F)+
scale_color_brewer(palette="Set2")+
scale_y_continuous(n.breaks=10)+
#geom_hline(yintercept=50, linetype = 'dashed', color = 'grey')+
theme_classic()+
labs(x='Stimulus Onset Asynchrony', y='% items recalled')+
theme(text=element_text(size=17))+
scale_y_continuous(
labels = scales::number_format(accuracy = 1))
list.per100.recall.SOA.fig2
